// @flow
import type {
  FindOperation,
  UpdateOperation,
} from 'mongolike-operations'
import type { Id } from './id.js.flow' // string
import type { ProEntity } from './entity.js.flow'

type EntityName = string

// see https://docs.mongodb.com/manual/reference/command/insert/
export type SingleInsertCommand<N: EntityName = EntityName, P: ProEntity = ProEntity> = {|
  entityName: N, // "insert" key in MongoDB reference
  value: P, // "documents" key in MongoDB reference
  ordered?: boolean,
|}

// see https://docs.mongodb.com/manual/reference/command/insert/
export type MultiInsertCommand<N: EntityName = EntityName, P: ProEntity = ProEntity> = {|
  entityName: N, // "insert" key in MongoDB reference
  values: Array<P>, // "documents" key in MongoDB reference
  ordered?: boolean,
|}

// see https://docs.mongodb.com/manual/reference/command/update/
export type UpdateCommand<N: EntityName = EntityName> = IdUpdateCommand<N> | MultiUpdateCommand<N>

export type IdUpdateCommand<N: EntityName = EntityName> = {|
  entityName: N, // "update" key in MongoDB reference
  id: Id,
  operation: UpdateOperation, // "u" key in MongoDB reference
|}

export type MultiUpdateCommand<N: EntityName = EntityName> = {|
  entityName: N, // "update" key in MongoDB reference
  +where: FindOperation, // "q" key in MongoDB reference
  operation: UpdateOperation, // "u" key in MongoDB reference
  ordered?: boolean,
|}

export type UpsertCommand<N: EntityName = EntityName, P: ProEntity = ProEntity> = {|
  entityName: N, // "update" key in MongoDB reference
  +where: FindOperation, // "q" key in MongoDB reference
  value: P, // "u" key in MongoDB reference
  ordered?: boolean,
|}

export type PushCommand<N: EntityName = EntityName> = {|
  entityName: N,
  id: Id,
  operations: Array<UpdateOperation>,
  versionId: Id,
|}

// see https://docs.mongodb.com/manual/reference/command/delete/
export type DeleteCommand<N: EntityName = EntityName> = IdDeleteCommand<N> | MultiDeleteCommand<N>

export type IdDeleteCommand<N: EntityName = EntityName> = {|
  entityName: N, // "delete" key in MongoDB reference
  id: Id,
|}

export type MultiDeleteCommand<N: EntityName = EntityName> = {|
  entityName: N, // "delete" key in MongoDB reference
  +where: FindOperation, // "q" key in MongoDB reference
  limit?: number,
  ordered?: boolean,
|}

export interface CustomCommand<N: string = string, P: Object = Object> {
  name: N, // custom insert command name
  params: P
}


export interface LoginCommand<N: EntityName = EntityName, C: Object = Object, O: Object = Object> {
  credentials: C,
  entityName: N,
  options?: O,
}

export interface LogoutCommand<N: EntityName = EntityName> {
  sessionId: Id,
  userId: Id,
  entityName: N,
}
