// @flow
import type { RequestData } from './request-data.js.flow'
import type {
  WhereQuery,
  IdQuery,
  IdsQuery,
  CustomQuery,
  PullQuery,
} from './query.js.flow'

import type {
  SingleInsertCommand,
  MultiInsertCommand,
  IdUpdateCommand,
  MultiUpdateCommand,
  DeleteCommand,
  CustomCommand,
  LoginCommand,
  LogoutCommand,
  PushCommand,
} from './command.js.flow'

export type RequestDataHandlers<T> = {
  handleDefault: (reqData: RequestData) => Promise<T>,

  find?: (query: WhereQuery) => Promise<T>,
  findOne?: (query: WhereQuery) => Promise<T>,
  get?: (query: IdQuery) => Promise<T>,
  getByIds?: (query: IdsQuery) => Promise<T>,
  pull?: (query: PullQuery) => Promise<T>,
  insertOne?: (command: SingleInsertCommand) => Promise<T>,
  insertMulti?: (command: MultiInsertCommand) => Promise<T>,
  insertAndGet?: (command: SingleInsertCommand) => Promise<T>,
  insertAndGetMulti?: (command: MultiInsertCommand) => Promise<T>,
  updateById?: (command: IdUpdateCommand) => Promise<T>,
  updateMulti?: (command: MultiUpdateCommand) => Promise<T>,
  updateAndGet?: (command: IdUpdateCommand) => Promise<T>,
  updateAndFetch?: (command: MultiUpdateCommand) => Promise<T>,
  push?: (command: PushCommand) => Promise<T>,
  delete?: (command: DeleteCommand) => Promise<T>,
  runCustomQuery?: (query: CustomQuery) => Promise<T>,
  runCustomCommand?: (command: CustomCommand) => Promise<T>,
  login?: (command: LoginCommand) => Promise<T>,
  logout?: (command: LogoutCommand) => Promise<T>,

  notMatch?: (reqData: RequestData) => Promise<T>,
}
