// @flow

import type { UpdateOperation } from 'mongolike-operations'
import type { Id } from './id.js.flow'
import type { Session } from './session.js.flow'
import type { Entity } from './entity.js.flow'

export type DeleteCommandResult = {
  ok: 1,
  n: number,
}

export type SingleInsertCommandResult = {
  ok: 1,
  n: number,
  versionId: Id,
}

export type MultiInsertCommandResult = {
  ok: 1,
  n: number,
  versionsById: { [entityId: Id]: Id },
}

export type IdUpdateCommandResult = {
  ok: 1,
  n: number,
  versionId: Id,
  prevVersionId: ?Id,
}

export type MultiUpdateCommandResult = {
  ok: 1,
  n: number,
  versionsById: { [entityId: Id]: Id },
  prevVersionsById: { [entityId: Id]: Id },
}

export type MultiValuesCommandResult = {
  ok: 1,
  n: number,
  entities: Array<Entity>,
  versionsById: { [entityId: Id]: Id },
  prevVersionsById: { [entityId: Id]: Id },
}

export type GetCommandResult = {|
  ok: 1,
  n: number, // TODO necessary?
  entity: Entity,
  versionId: Id,
  prevVersionId: ?Id,
|}

export type PushCommandResult =
  | {|
      ok: 1,
      n: number, // TODO necessary?
      hasEntity: 0,
      operations: Array<UpdateOperation>,
      newOperation: UpdateOperation,
      versionId: Id,
      prevVersionId: ?Id,
    |}
  | {|
      ok: 1,
      n: number, // TODO necessary?
      hasEntity: 1,
      entity: Entity,
      versionId: Id,
      prevVersionId: ?Id,
      newOperation: UpdateOperation,
    |}

export type CustomCommandResult = {
  ok: 1,
  result?: Object,
}

export type LoginCommandResult = {
  ok: 1,
  session: Session,
  user: ?Entity,
  versionId: ?Id,
}

export type LogoutCommandResult = {
  ok: 1,
}
