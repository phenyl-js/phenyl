// @flow
import type {
  UpdateOperation
} from 'mongolike-operations'

import type {
  EntityMap,
} from './type-map.js.flow'

import type {
  Entity,
  EntityName,
} from './entity.js.flow'

import type {
  IdQuery,
  IdsQuery,
  WhereQuery,
} from './query.js.flow'

import type {
  IdUpdateCommand,
  MultiUpdateCommand,
  UpsertCommand,
  DeleteCommand,
} from './command.js.flow'

export type EntityPool<M: EntityMap> = $ObjMap<M, <T: Entity>(T) => EntitiesById<T>>
export type EntitiesById<T: Entity> = { [id: string]: T }

export interface EntityState<M: EntityMap> {
  pool: EntityPool<M>
}

export interface EntityStateFinder<M: EntityMap> {
  find<N: EntityName>(query: WhereQuery<N>): Array<$ElementType<M, N>>,
  findOne<N: EntityName>(query: WhereQuery<N>): ?$ElementType<M, N>,
  get<N: EntityName>(query: IdQuery<N>): $ElementType<M, N>,
  getByIds<N: EntityName>(query: IdsQuery<N>): Array<$ElementType<M, N>>,
  has<N: EntityName>(query: IdQuery<N>): boolean,
}

export interface EntityStateUpdater<M: EntityMap> {
  register<N: EntityName>(entityName: N, ...entities: Array<$ElementType<M, N>>): UpdateOperation,
  updateById<N: EntityName>(command: IdUpdateCommand<N>): UpdateOperation,
  updateMulti<N: EntityName>(command: MultiUpdateCommand<N>): UpdateOperation,
  upsert<N: EntityName>(command: UpsertCommand<N>): UpdateOperation,
  delete<N: EntityName>(command: DeleteCommand<N>): UpdateOperation,
}
